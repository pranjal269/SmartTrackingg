{"ast":null,"code":"import axios from 'axios';\n\n// Dynamically determine the API base URL based on current host\nconst getApiBaseUrl = () => {\n  // Check if we're in a browser environment\n  if (typeof window !== 'undefined' && window.location) {\n    const currentHost = window.location.hostname;\n\n    // If accessing via network IP, use the same IP for API\n    if (currentHost === '192.168.1.6') {\n      return 'http://192.168.1.6:8080/api';\n    }\n  }\n\n  // Default to localhost for local development\n  return 'http://localhost:8080/api';\n};\nconst apiClient = axios.create({\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Set the base URL dynamically for each request\napiClient.interceptors.request.use(config => {\n  var _config$method;\n  // Set baseURL for each request to handle dynamic detection\n  config.baseURL = getApiBaseUrl();\n  console.log('API Request:', (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.baseURL + config.url);\n  return config;\n});\n\n// Add response interceptor to log responses\napiClient.interceptors.response.use(response => {\n  console.log('API Response:', response.status, response.data);\n  return response;\n}, error => {\n  var _error$response, _error$response2, _error$config, _error$config2;\n  console.error('API Error:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n  console.error('Request URL:', ((_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.baseURL) + ((_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.url));\n  return Promise.reject(error);\n});\nexport default apiClient;","map":{"version":3,"names":["axios","getApiBaseUrl","window","location","currentHost","hostname","apiClient","create","headers","interceptors","request","use","config","_config$method","baseURL","console","log","method","toUpperCase","url","response","status","data","error","_error$response","_error$response2","_error$config","_error$config2","message","Promise","reject"],"sources":["/Users/dev16/temp_project/parcel-tracking-frontend/src/api/apiClient.js"],"sourcesContent":["import axios from 'axios';\n\n// Dynamically determine the API base URL based on current host\nconst getApiBaseUrl = () => {\n  // Check if we're in a browser environment\n  if (typeof window !== 'undefined' && window.location) {\n    const currentHost = window.location.hostname;\n    \n    // If accessing via network IP, use the same IP for API\n    if (currentHost === '192.168.1.6') {\n      return 'http://192.168.1.6:8080/api';\n    }\n  }\n  \n  // Default to localhost for local development\n  return 'http://localhost:8080/api';\n};\n\nconst apiClient = axios.create({\n  headers: { 'Content-Type': 'application/json' }\n});\n\n// Set the base URL dynamically for each request\napiClient.interceptors.request.use(config => {\n  // Set baseURL for each request to handle dynamic detection\n  config.baseURL = getApiBaseUrl();\n  \n  console.log('API Request:', config.method?.toUpperCase(), config.baseURL + config.url);\n  \n  return config;\n});\n\n// Add response interceptor to log responses\napiClient.interceptors.response.use(\n  response => {\n    console.log('API Response:', response.status, response.data);\n    return response;\n  },\n  error => {\n    console.error('API Error:', error.response?.status, error.response?.data || error.message);\n    console.error('Request URL:', error.config?.baseURL + error.config?.url);\n    return Promise.reject(error);\n  }\n);\n\nexport default apiClient; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAC1B;EACA,IAAI,OAAOC,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACC,QAAQ,EAAE;IACpD,MAAMC,WAAW,GAAGF,MAAM,CAACC,QAAQ,CAACE,QAAQ;;IAE5C;IACA,IAAID,WAAW,KAAK,aAAa,EAAE;MACjC,OAAO,6BAA6B;IACtC;EACF;;EAEA;EACA,OAAO,2BAA2B;AACpC,CAAC;AAED,MAAME,SAAS,GAAGN,KAAK,CAACO,MAAM,CAAC;EAC7BC,OAAO,EAAE;IAAE,cAAc,EAAE;EAAmB;AAChD,CAAC,CAAC;;AAEF;AACAF,SAAS,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EAAA,IAAAC,cAAA;EAC3C;EACAD,MAAM,CAACE,OAAO,GAAGb,aAAa,CAAC,CAAC;EAEhCc,OAAO,CAACC,GAAG,CAAC,cAAc,GAAAH,cAAA,GAAED,MAAM,CAACK,MAAM,cAAAJ,cAAA,uBAAbA,cAAA,CAAeK,WAAW,CAAC,CAAC,EAAEN,MAAM,CAACE,OAAO,GAAGF,MAAM,CAACO,GAAG,CAAC;EAEtF,OAAOP,MAAM;AACf,CAAC,CAAC;;AAEF;AACAN,SAAS,CAACG,YAAY,CAACW,QAAQ,CAACT,GAAG,CACjCS,QAAQ,IAAI;EACVL,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEI,QAAQ,CAACC,MAAM,EAAED,QAAQ,CAACE,IAAI,CAAC;EAC5D,OAAOF,QAAQ;AACjB,CAAC,EACDG,KAAK,IAAI;EAAA,IAAAC,eAAA,EAAAC,gBAAA,EAAAC,aAAA,EAAAC,cAAA;EACPZ,OAAO,CAACQ,KAAK,CAAC,YAAY,GAAAC,eAAA,GAAED,KAAK,CAACH,QAAQ,cAAAI,eAAA,uBAAdA,eAAA,CAAgBH,MAAM,EAAE,EAAAI,gBAAA,GAAAF,KAAK,CAACH,QAAQ,cAAAK,gBAAA,uBAAdA,gBAAA,CAAgBH,IAAI,KAAIC,KAAK,CAACK,OAAO,CAAC;EAC1Fb,OAAO,CAACQ,KAAK,CAAC,cAAc,EAAE,EAAAG,aAAA,GAAAH,KAAK,CAACX,MAAM,cAAAc,aAAA,uBAAZA,aAAA,CAAcZ,OAAO,MAAAa,cAAA,GAAGJ,KAAK,CAACX,MAAM,cAAAe,cAAA,uBAAZA,cAAA,CAAcR,GAAG,EAAC;EACxE,OAAOU,OAAO,CAACC,MAAM,CAACP,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAejB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}